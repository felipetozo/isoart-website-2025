name: Deploy Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run CI checks
        run: |
          npm run lint || echo "ESLint warnings found, continuing..."
          npx tsc --noEmit || echo "TypeScript warnings found, continuing..."
        env:
          NEXT_PUBLIC_SURI_CHATBOT_ID: ${{ secrets.NEXT_PUBLIC_SURI_CHATBOT_ID }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
      
      - name: Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_SURI_CHATBOT_ID: ${{ secrets.NEXT_PUBLIC_SURI_CHATBOT_ID }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
      
      - name: Create deployment package
        run: |
          mkdir -p deploy-package
          cp -r .next deploy-package/
          cp -r public deploy-package/
          cp -r src deploy-package/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          cp next.config.ts deploy-package/
          cp tsconfig.json deploy-package/
          cp middleware.ts deploy-package/
          cp postcss.config.mjs deploy-package/
          cp eslint.config.mjs deploy-package/
          
          # Criar arquivo de exemplo de vari√°veis de ambiente
          cat > deploy-package/.env.production.example << EOF
          # Configura√ß√µes de Produ√ß√£o - Isoart Website 2025
          # Renomeie para .env.local no servidor
          
          NEXT_PUBLIC_SURI_CHATBOT_ID=seu_chatbot_id_aqui
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=GTM-W6JCS4X
          SMTP_HOST=mail.infc.srv.br
          SMTP_PORT=587
          SMTP_USER=noreply@isoart.com.br
          SMTP_PASS=senha_email_segura
          NODE_ENV=production
          EOF
          
          tar -czf deploy-package.tar.gz -C deploy-package .
      
      - name: Deploy to FTP server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_SERVER_DIR }}
          local-dir: ./deploy-package/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.env*
            **/README.md
            **/.github/**
            **/docs/**
            **/logs/**

      - name: Trigger server reset (cron-based)
        if: success()
        run: |
          echo "RESET $(date -u +%Y-%m-%dT%H:%M:%SZ)" > trigger.txt
        
      - name: Upload trigger.txt
        if: success()
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_SERVER_DIR }}
          local-dir: ./
          exclude: |
            **/*
          include: |
            trigger.txt
      
      - name: Notify server manager
        if: success()
        run: |
          echo "üöÄ Deploy para produ√ß√£o conclu√≠do com sucesso!"
          echo "üìÅ Arquivos enviados via FTP para: ${{ secrets.FTP_SERVER_DIR }}"
          echo "‚ö†Ô∏è  ATEN√á√ÉO: √â necess√°rio fazer RESET/REBUILD no servidor para aplicar as mudan√ßas"
          echo "üìß Notifica√ß√£o enviada para felipetozo@icloud.com"
          
          # Notificar via webhook se configurado
          if [ -n "${{ secrets.NOTIFY_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.NOTIFY_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "message": "üöÄ Deploy Isoart Website conclu√≠do!",
                "details": "Arquivos enviados via FTP. Favor fazer RESET/REBUILD no servidor.",
                "branch": "${{ github.ref_name }}",
                "commit": "${{ github.sha }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                "notification_email": "felipetozo@icloud.com"
              }'
          fi
      
      - name: Create GitHub Release
        continue-on-error: true
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }} - Production Deploy
          body: |
            ## üöÄ Deploy para Produ√ß√£o
            
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
            **Data**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            ### ‚úÖ Checklist de Deploy
            - [x] Build realizado com sucesso
            - [x] Arquivos enviados via FTP
            - [ ] **RESET/REBUILD no servidor** (a√ß√£o manual necess√°ria)
            
            ### üìã Pr√≥ximos Passos
            1. Verificar se o gestor foi notificado
            2. Confirmar reset/rebuild no servidor
            3. Validar funcionamento em produ√ß√£o
            
            ### üîç Detalhes T√©cnicos
            - **Node.js**: 20.x
            - **Build**: Next.js production build
            - **FTP Server**: ${{ secrets.FTP_SERVER }}
            - **Deploy Directory**: ${{ secrets.FTP_SERVER_DIR }}
          draft: false
          prerelease: false
      
      - name: Deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deploy para produ√ß√£o conclu√≠do com sucesso"
            echo "üìã Pr√≥ximo passo: Reset/rebuild no servidor"
          else
            echo "‚ùå Deploy falhou"
            echo "üîç Verificar logs para detalhes"
          fi
